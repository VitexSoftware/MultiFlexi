<?php

namespace Test\MultiFlexi;

use MultiFlexi\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2023-11-07 at 13:03:43.
 */
class ApplicationTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Application
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Application();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        
    }

    /**
     * @covers MultiFlexi\Application::getCompany
     * @todo   Implement testgetCompany().
     */
    public function testgetCompany()
    {
        $this->assertEquals('', $this->object->getCompany());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::takeData
     * @todo   Implement testtakeData().
     */
    public function testtakeData()
    {
        $this->assertEquals('', $this->object->takeData());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::findBinaryInPath
     * @todo   Implement testfindBinaryInPath().
     */
    public function testfindBinaryInPath()
    {
        $this->assertEquals('', $this->object->findBinaryInPath());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::doesBinaryExist
     * @todo   Implement testdoesBinaryExist().
     */
    public function testdoesBinaryExist()
    {
        $this->assertEquals('', $this->object->doesBinaryExist());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::isBinaryInPath
     * @todo   Implement testisBinaryInPath().
     */
    public function testisBinaryInPath()
    {
        $this->assertEquals('', $this->object->isBinaryInPath());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::getPlatformApps
     * @todo   Implement testgetPlatformApps().
     */
    public function testgetPlatformApps()
    {
        $this->assertEquals('', $this->object->getPlatformApps());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::getAppJson
     * @todo   Implement testgetAppJson().
     */
    public function testgetAppJson()
    {
        $this->assertEquals('', $this->object->getAppJson());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers MultiFlexi\Application::jsonFileName
     * @todo   Implement testjsonFileName().
     */
    public function testjsonFileName()
    {
        $this->assertEquals('', $this->object->jsonFileName());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }
}
