<?php

namespace Test\MultiFlexi;

use MultiFlexi\Application;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2023-11-07 at 13:03:43.
 */
class ApplicationTest extends \PHPUnit\Framework\TestCase
{

    /**
     * @var Application
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Application();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        
    }

    /**
     * @covers MultiFlexi\Application::getCompany
     */
    public function testgetCompany()
    {
        $this->assertEquals('', $this->object->getCompany());
    }

    /**
     * @covers MultiFlexi\Application::takeData
     */
    public function testtakeData()
    {
        $this->assertEquals(3, $this->object->takeData(['enabled' => 'on', 'executable' => '/bin/test']));
    }

    /**
     * @covers MultiFlexi\Application::findBinaryInPath
     */
    public function testfindBinaryInPath()
    {
        $this->assertEquals('/usr/bin/bash', $this->object->findBinaryInPath('bash'));
    }

    /**
     * @covers MultiFlexi\Application::doesBinaryExist
     */
    public function testdoesBinaryExist()
    {
        $this->assertTrue($this->object->doesBinaryExist('/usr/bin/tar'));
    }

    /**
     * @covers MultiFlexi\Application::isBinaryInPath
     */
    public function testisBinaryInPath()
    {
        $this->assertTrue($this->object->isBinaryInPath('more'));
    }

    /**
     * @covers MultiFlexi\Application::getPlatformApps
     */
    public function testgetPlatformApps()
    {
        $this->assertEquals([], $this->object->getPlatformApps('Unix'));
    }

    /**
     * @covers MultiFlexi\Application::getAppJson
     */
    public function testgetAppJson()
    {
        $this->assertEquals('{
    "environment": [],
    "multiflexi": "dev-main"
}', $this->object->getAppJson());
    }

    /**
     * @covers MultiFlexi\Application::jsonFileName
     */
    public function testjsonFileName()
    {
        $this->assertEquals('.multiflexi.app.json', $this->object->jsonFileName());
    }
}
