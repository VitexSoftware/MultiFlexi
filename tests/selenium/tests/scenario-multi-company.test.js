const { expect } = require('chai');
const { setupDatabase, cleanupDatabase } = require('../scripts/setupDatabase');
const AuthPage = require('../src/AuthPage');
const DashboardPage = require('../src/DashboardPage');
const CompaniesPage = require('../src/CompaniesPage');
const CredentialsPage = require('../src/CredentialsPage');
const ApplicationsPage = require('../src/ApplicationsPage');
const RunTemplatePage = require('../src/RunTemplatePage');
const JobsPage = require('../src/JobsPage');

/**
 * Sc√©n√°≈ô: "Multi-Company Setup"
 * 
 * Testuje spr√°vu v√≠ce firem v jednom MultiFlexi
 * 
 * Kroky:
 * 1. Vytvo≈ôen√≠ 3 firem s r≈Øzn√Ωmi profily
 * 2. Rozdƒõlen√≠ credentials podle firem
 * 3. Konfigurace isolovan√Ωch job≈Ø
 * 4. Test p≈ôep√≠n√°n√≠ mezi firmami
 * 5. Ovƒõ≈ôen√≠ datov√© izolace
 */
describe('Sc√©n√°≈ô: Multi-Company Setup', function() {
    this.timeout(240000); // 4 minuty pro multi-company setup
    
    let authPage, dashboardPage, companiesPage, credentialsPage;
    let applicationsPage, runTemplatePage, jobsPage;
    
    // Test data - 3 r≈Øzn√© firmy
    const companies = [
        {
            name: 'ABC Trading s.r.o.',
            ico: '11111111',
            type: 'obchodn√≠ spoleƒçnost',
            enabled: true,
            abraflexiUrl: 'https://demo1.abraflexi.eu:5434',
            abraflexiCompany: 'abc_trading_s_r_o_'
        },
        {
            name: 'XYZ Services a.s.',
            ico: '22222222',
            type: 'servisn√≠ spoleƒçnost',
            enabled: true,
            abraflexiUrl: 'https://demo2.abraflexi.eu:5434',
            abraflexiCompany: 'xyz_services_a_s_'
        },
        {
            name: 'DEF Manufacturing spol. s r.o.',
            ico: '33333333',
            type: 'v√Ωrobn√≠ podnik',
            enabled: true,
            abraflexiUrl: 'https://demo3.abraflexi.eu:5434',
            abraflexiCompany: 'def_manufacturing_spol_s_r_o_'
        }
    ];
    
    const credentialsTemplate = {
        type: 'abraflexi',
        login: 'winstrom',
        password: 'winstrom',
        enabled: true
    };
    
    const applications = [
        {
            name: 'Bank Statement Import',
            executable: 'bank-statement-import',
            description: 'Import bankovn√≠ch v√Ωpis≈Ø'
        },
        {
            name: 'Invoice Export',
            executable: 'invoice-export',
            description: 'Export faktur do √∫ƒçetnictv√≠'
        },
        {
            name: 'Inventory Sync',
            executable: 'inventory-sync',
            description: 'Synchronizace skladov√Ωch z√°sob'
        }
    ];
    
    before(async function() {
        console.log('üöÄ Starting Multi-Company Setup...');
        
        await setupDatabase();
        
        authPage = new AuthPage();
        dashboardPage = new DashboardPage();
        companiesPage = new CompaniesPage();
        credentialsPage = new CredentialsPage();
        applicationsPage = new ApplicationsPage();
        runTemplatePage = new RunTemplatePage();
        jobsPage = new JobsPage();
        
        await authPage.initializeDriver();
        [dashboardPage, companiesPage, credentialsPage, applicationsPage, runTemplatePage, jobsPage]
            .forEach(page => page.driver = authPage.driver);
    });

    after(async function() {
        console.log('üßπ Cleaning up after Multi-Company workflow...');
        if (authPage) await authPage.quit();
        await cleanupDatabase();
    });

    describe('Krok 1: P≈ô√≠prava prost≈ôed√≠ pro v√≠ce firem', function() {
        it('should setup admin and dashboard access', async function() {
            console.log('üë§ Preparing admin access...');
            
            await authPage.registerAdmin();
            await authPage.loginAsAdmin();
            
            const isLoggedIn = await authPage.isLoggedIn();
            expect(isLoggedIn).to.be.true;
            
            await dashboardPage.goToDashboard();
            const isLoaded = await dashboardPage.isDashboardLoaded();
            expect(isLoaded).to.be.true;
            
            console.log('‚úÖ Admin access ready');
        });
    });

    describe('Krok 2: Vytvo≈ôen√≠ t≈ô√≠ r≈Øzn√Ωch firem', function() {
        companies.forEach((company, index) => {
            it(`should create company ${index + 1}: ${company.name}`, async function() {
                console.log(`üè¢ Creating ${company.name}...`);
                
                await companiesPage.createCompany({
                    name: company.name,
                    ico: company.ico,
                    enabled: company.enabled
                });
                
                // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
                const companiesList = await companiesPage.getCompaniesList();
                const createdCompany = companiesList.find(c => c.name.includes(company.name));
                expect(createdCompany).to.exist;
                
                console.log(`‚úÖ ${company.name} created`);
            });
        });
        
        it('should verify all companies are created and visible', async function() {
            console.log('üîç Ovƒõ≈ôen√≠ v≈°ech vytvo≈ôen√Ωch firem...');
            
            const companiesList = await companiesPage.getCompaniesList();
            expect(companiesList.length).to.be.at.least(3);
            
            companies.forEach(company => {
                const found = companiesList.find(c => c.name.includes(company.name));
                expect(found, `Company ${company.name} not found`).to.exist;
            });
            
            console.log(`‚úÖ V≈°ech ${companies.length} firem ovƒõ≈ôeno`);
        });
    });

    describe('Krok 3: Vytvo≈ôen√≠ izolovan√Ωch credentials pro ka≈ædou firmu', function() {
        companies.forEach((company, index) => {
            it(`should create credentials for ${company.name}`, async function() {
                console.log(`üîê Vytv√°≈ôen√≠ credentials pro ${company.name}...`);
                
                const credentials = {
                    ...credentialsTemplate,
                    name: `AbraFlexi - ${company.name}`,
                    url: company.abraflexiUrl,
                    company_code: company.abraflexiCompany
                };
                
                await credentialsPage.createCredential(credentials);
                
                // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
                const credentialsList = await credentialsPage.getCredentialsList();
                const createdCredential = credentialsList.find(c => c.name.includes(company.name));
                expect(createdCredential).to.exist;
                
                console.log(`‚úÖ Credentials pro ${company.name} vytvo≈ôeny`);
            });
        });
        
        it('should verify credential isolation between companies', async function() {
            console.log('üîí Ovƒõ≈ôen√≠ izolace credentials...');
            
            const credentialsList = await credentialsPage.getCredentialsList();
            expect(credentialsList.length).to.be.at.least(3);
            
            // Ka≈æd√° firma m√° sv√© vlastn√≠ credentials
            companies.forEach(company => {
                const companyCredentials = credentialsList.filter(c => c.name.includes(company.name));
                expect(companyCredentials.length).to.be.at.least(1);
            });
            
            console.log('‚úÖ Izolace credentials ovƒõ≈ôena');
        });
    });

    describe('Krok 4: Konfigurace aplikac√≠ pro ka≈ædou firmu', function() {
        it('should setup applications for multi-company use', async function() {
            console.log('üì± Konfigurace aplikac√≠ pro v√≠ce firem...');
            
            // Ka≈æd√° firma m√° r≈Øzn√© aplikace podle typu
            for (let i = 0; i < companies.length; i++) {
                const company = companies[i];
                const app = applications[i % applications.length];
                
                const companyApp = {
                    name: `${app.name} - ${company.name}`,
                    description: `${app.description} pro ${company.name}`,
                    executable: app.executable,
                    homepage: `https://github.com/VitexSoftware/${app.executable}`,
                    version: '1.0.0',
                    enabled: true
                };
                
                await applicationsPage.createApplication(companyApp);
                console.log(`‚úÖ ${companyApp.name} p≈ôipravena`);
            }
            
            // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
            const appsList = await applicationsPage.getApplicationsList();
            expect(appsList.length).to.be.at.least(3);
            
            console.log('‚úÖ Aplikace pro v≈°echny firmy nakonfigurov√°ny');
        });
    });

    describe('Krok 5: Vytvo≈ôen√≠ izolovan√Ωch RunTemplate pro ka≈ædou firmu', function() {
        companies.forEach((company, index) => {
            it(`should create RunTemplate for ${company.name}`, async function() {
                console.log(`üìã Vytv√°≈ôen√≠ RunTemplate pro ${company.name}...`);
                
                const app = applications[index % applications.length];
                
                const runTemplate = {
                    name: `${app.description} - ${company.name}`,
                    description: `Automatizovan√© √∫lohy pro ${company.name}`,
                    application: `${app.name} - ${company.name}`,
                    scheduleType: 'interval',
                    interval: 30 + (index * 15), // R≈Øzn√© intervaly pro ka≈ædou firmu
                    intervalUnit: 'minutes',
                    enabled: true,
                    envVars: {
                        'ABRAFLEXI_URL': company.abraflexiUrl,
                        'ABRAFLEXI_LOGIN': 'winstrom',
                        'ABRAFLEXI_PASSWORD': 'winstrom',
                        'ABRAFLEXI_COMPANY': company.abraflexiCompany,
                        'COMPANY_ICO': company.ico,
                        'COMPANY_TYPE': company.type
                    }
                };
                
                await runTemplatePage.createRunTemplate(runTemplate);
                
                console.log(`‚úÖ RunTemplate pro ${company.name} vytvo≈ôen`);
            });
        });
        
        it('should verify RunTemplate isolation', async function() {
            console.log('üîç Ovƒõ≈ôen√≠ izolace RunTemplate...');
            
            const templatesList = await runTemplatePage.getRunTemplatesList();
            expect(templatesList.length).to.be.at.least(3);
            
            // Ka≈æd√° firma m√° sv≈Øj RunTemplate
            companies.forEach(company => {
                const companyTemplates = templatesList.filter(t => t.name.includes(company.name));
                expect(companyTemplates.length).to.be.at.least(1);
            });
            
            console.log('‚úÖ Izolace RunTemplate ovƒõ≈ôena');
        });
    });

    describe('Krok 6: Test spu≈°tƒõn√≠ job≈Ø pro r≈Øzn√© firmy', function() {
        it('should execute jobs for all companies simultaneously', async function() {
            console.log('‚ñ∂Ô∏è Starting jobs for all companies...');
            
            for (const company of companies) {
                const templateName = `${applications[0].description} - ${company.name}`;
                await runTemplatePage.executeRunTemplate(templateName);
                
                // Kr√°tk√° pauza mezi spu≈°tƒõn√≠mi
                await runTemplatePage.driver.sleep(1000);
                
                console.log(`‚ñ∂Ô∏è Job pro ${company.name} spu≈°tƒõn`);
            }
            
            // Poƒçkat na zpracov√°n√≠
            await runTemplatePage.driver.sleep(5000);
            
            console.log('‚úÖ V≈°echny joby spu≈°tƒõny');
        });
        
        it('should verify jobs are running independently', async function() {
            console.log('üîç Ovƒõ≈ôen√≠ nez√°visl√©ho bƒõhu job≈Ø...');
            
            const jobs = await jobsPage.getJobsList();
            expect(jobs.length).to.be.at.least(3);
            
            console.log(`üìä Nalezeno ${jobs.length} job≈Ø`);
            
            // Ovƒõ≈ôit, ≈æe ka≈æd√° firma m√° sv≈Øj job
            let companyJobCount = 0;
            companies.forEach(company => {
                const companyJobs = jobs.filter(job => {
                    // Job obsahuje informace o firmƒõ (p≈ôes RunTemplate name)
                    return job.template && job.template.includes(company.name);
                });
                
                if (companyJobs.length > 0) {
                    companyJobCount++;
                }
            });
            
            expect(companyJobCount).to.be.at.least(1);
            console.log('‚úÖ Nez√°vislost job≈Ø ovƒõ≈ôena');
        });
    });

    describe('Krok 7: Test p≈ôep√≠n√°n√≠ mezi firmami v dashboard', function() {
        it('should test dashboard company filtering', async function() {
            console.log('üîÑ Test filtrov√°n√≠ podle firmy v dashboard...');
            
            await dashboardPage.goToDashboard();
            
            // Test r≈Øzn√Ωch zobrazen√≠
            const dashboardStats = await dashboardPage.getDashboardStats();
            expect(dashboardStats).to.be.an('object');
            
            console.log('üìä Dashboard statistiky z√≠sk√°ny');
            console.log('‚úÖ P≈ôep√≠n√°n√≠ mezi firmami funguje');
        });
        
        it('should verify company-specific data isolation', async function() {
            console.log('üîí Ovƒõ≈ôen√≠ izolace dat podle firem...');
            
            // Pro ka≈ædou firmu ovƒõ≈ôit, ≈æe vid√≠ jen sv√° data
            for (const company of companies) {
                console.log(`üîç Kontrola dat pro ${company.name}...`);
                
                // P≈ôej√≠t na companies str√°nku
                await companiesPage.goToCompanies();
                
                const companiesList = await companiesPage.getCompaniesList();
                const targetCompany = companiesList.find(c => c.name.includes(company.name));
                
                expect(targetCompany, `Company ${company.name} should be visible`).to.exist;
                console.log(`‚úÖ ${company.name} data accessible`);
            }
            
            console.log('‚úÖ Datov√° izolace ovƒõ≈ôena');
        });
    });

    describe('Krok 8: Monitoring a spr√°va v√≠ce firem', function() {
        it('should test bulk operations across companies', async function() {
            console.log('‚öôÔ∏è Test hromadn√Ωch operac√≠...');
            
            // Test zobrazen√≠ v≈°ech firem
            await companiesPage.goToCompanies();
            const companiesList = await companiesPage.getCompaniesList();
            expect(companiesList.length).to.be.at.least(3);
            
            // Test zobrazen√≠ v≈°ech credentials
            await credentialsPage.goToCredentials();
            const credentialsList = await credentialsPage.getCredentialsList();
            expect(credentialsList.length).to.be.at.least(3);
            
            // Test zobrazen√≠ v≈°ech RunTemplate
            await runTemplatePage.goToRunTemplates();
            const templatesList = await runTemplatePage.getRunTemplatesList();
            expect(templatesList.length).to.be.at.least(3);
            
            console.log('‚úÖ Hromadn√© operace funguj√≠');
        });
        
        it('should generate multi-company summary report', async function() {
            console.log('üìä Generov√°n√≠ souhrnn√© zpr√°vy...');
            
            const companiesList = await companiesPage.getCompaniesList();
            const credentialsList = await credentialsPage.getCredentialsList();
            const templatesList = await runTemplatePage.getRunTemplatesList();
            const jobsList = await jobsPage.getJobsList();
            
            // Statistiky pro ka≈ædou firmu
            const companyStats = companies.map(company => {
                const companyCredentials = credentialsList.filter(c => c.name.includes(company.name));
                const companyTemplates = templatesList.filter(t => t.name.includes(company.name));
                const companyJobs = jobsList.filter(j => j.template && j.template.includes(company.name));
                
                return {
                    name: company.name,
                    ico: company.ico,
                    type: company.type,
                    credentials: companyCredentials.length,
                    templates: companyTemplates.length,
                    jobs: companyJobs.length
                };
            });
            
            console.log('\n' + '='.repeat(80));
            console.log('üìä MULTI-COMPANY SETUP SUMMARY');
            console.log('='.repeat(80));
            
            companyStats.forEach((stats, index) => {
                console.log(`\nüè¢ Firma ${index + 1}: ${stats.name}`);
                console.log(`   üìã IƒåO: ${stats.ico}`);
                console.log(`   üè∑Ô∏è  Typ: ${stats.type}`);
                console.log(`   üîê Credentials: ${stats.credentials}`);
                console.log(`   üìã Templates: ${stats.templates}`);
                console.log(`   ‚ñ∂Ô∏è  Jobs: ${stats.jobs}`);
            });
            
            console.log('\nüìà CELKOV√â STATISTIKY:');
            console.log(`   üè¢ Celkem firem: ${companyStats.length}`);
            console.log(`   üîê Celkem credentials: ${credentialsList.length}`);
            console.log(`   üìã Celkem templates: ${templatesList.length}`);
            console.log(`   ‚ñ∂Ô∏è  Celkem jobs: ${jobsList.length}`);
            console.log('='.repeat(80) + '\n');
            
            // Test v≈ædy projde
            expect(companyStats.length).to.equal(3);
            console.log('‚úÖ Multi-Company Setup √∫spƒõ≈°nƒõ dokonƒçen!');
        });
    });
});