const { expect } = require('chai');
const { setupDatabase, cleanupDatabase } = require('../scripts/setupDatabase');
const AuthPage = require('../src/AuthPage');
const DashboardPage = require('../src/DashboardPage');
const CompaniesPage = require('../src/CompaniesPage');
const CredentialsPage = require('../src/CredentialsPage');
const ApplicationsPage = require('../src/ApplicationsPage');
const RunTemplatePage = require('../src/RunTemplatePage');
const JobsPage = require('../src/JobsPage');

/**
 * Sc√©n√°≈ô: "AbraFlexi Complete Workflow"
 * 
 * Nejƒçastƒõj≈°√≠ use case - kompletn√≠ setup firmy s AbraFlexi integrac√≠
 * 
 * Kroky:
 * 1. Setup admin √∫ƒçtu
 * 2. Vytvo≈ôen√≠ firmy "DEMO s.r.o."
 * 3. Konfigurace AbraFlexi credentials
 * 4. P≈ôi≈ôazen√≠ AbraFlexi aplikac√≠
 * 5. Vytvo≈ôen√≠ RunTemplate pro import bankovn√≠ch v√Ωpis≈Ø
 * 6. Test spu≈°tƒõn√≠ jobu
 * 7. Monitoring a kontrola v√Ωsledk≈Ø
 */
describe('Sc√©n√°≈ô: AbraFlexi Complete Workflow', function() {
    this.timeout(300000); // 5 minut pro kompletn√≠ workflow
    
    let authPage, dashboardPage, companiesPage, credentialsPage;
    let applicationsPage, runTemplatePage, jobsPage;
    
    // Test data
    const testCompany = {
        name: 'DEMO s.r.o.',
        ico: '12345678',
        enabled: true
    };
    
    const abraFlexiCredentials = {
        name: 'AbraFlexi DEMO',
        type: 'abraflexi',
        url: 'https://demo.abraflexi.eu:5434',
        login: 'winstrom',
        password: 'winstrom',
        company_code: 'demo_s_r_o_',
        enabled: true
    };
    
    const bankImportTemplate = {
        name: 'Import bankovn√≠ch v√Ωpis≈Ø - DEMO',
        description: 'Automatick√Ω import v√Ωpis≈Ø z FIO banky do AbraFlexi',
        application: 'fio-banka-statement',
        scheduleType: 'interval',
        interval: 60,
        intervalUnit: 'minutes',
        enabled: true,
        envVars: {
            'ABRAFLEXI_URL': 'https://demo.abraflexi.eu:5434',
            'ABRAFLEXI_LOGIN': 'winstrom',
            'ABRAFLEXI_PASSWORD': 'winstrom',
            'ABRAFLEXI_COMPANY': 'demo_s_r_o_',
            'FIO_TOKEN': 'demo_token_12345',
            'IMPORT_DAYS_BACK': '7'
        }
    };
    
    before(async function() {
        console.log('üöÄ Starting AbraFlexi Complete Workflow...');
        
        // Setup datab√°ze
        await setupDatabase();
        
        // Inicializace page objects
        authPage = new AuthPage();
        dashboardPage = new DashboardPage();
        companiesPage = new CompaniesPage();
        credentialsPage = new CredentialsPage();
        applicationsPage = new ApplicationsPage();
        runTemplatePage = new RunTemplatePage();
        jobsPage = new JobsPage();
        
        // Spoleƒçn√Ω WebDriver pro v≈°echny page objekty
        await authPage.initializeDriver();
        [dashboardPage, companiesPage, credentialsPage, applicationsPage, runTemplatePage, jobsPage]
            .forEach(page => page.driver = authPage.driver);
    });

    after(async function() {
        console.log('üßπ Cleaning up after AbraFlexi workflow...');
        if (authPage) await authPage.quit();
        await cleanupDatabase();
    });

    describe('Krok 1: P≈ô√≠prava admin prost≈ôed√≠', function() {
        it('should setup admin account and login', async function() {
            console.log('üë§ Creating admin account...');
            
            await authPage.registerAdmin();
            await authPage.waitForRegistrationSuccess();
            
            await authPage.loginAsAdmin();
            await authPage.waitForLoginSuccess();
            
            const isLoggedIn = await authPage.isLoggedIn();
            expect(isLoggedIn).to.be.true;
            
            console.log('‚úÖ Admin account ready');
        });
        
        it('should verify dashboard is accessible', async function() {
            console.log('üìä Verifying dashboard access...');
            
            await dashboardPage.goToDashboard();
            const isLoaded = await dashboardPage.isDashboardLoaded();
            expect(isLoaded).to.be.true;
            
            console.log('‚úÖ Dashboard accessible');
        });
    });

    describe('Krok 2: Vytvo≈ôen√≠ firmy DEMO s.r.o.', function() {
        it('should create new company successfully', async function() {
            console.log('üè¢ Creating company DEMO s.r.o...');
            
            await companiesPage.createCompany(testCompany);
            
            // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
            const companies = await companiesPage.getCompaniesList();
            const createdCompany = companies.find(c => c.name.includes('DEMO s.r.o.'));
            expect(createdCompany).to.exist;
            
            console.log('‚úÖ Company DEMO s.r.o. created');
        });
        
        it('should configure company details', async function() {
            console.log('‚öôÔ∏è Konfigurace detail≈Ø firmy...');
            
            // P≈ôej√≠t na detail firmy pro dal≈°√≠ konfiguraci
            await companiesPage.goToCompany(1);
            
            // Ovƒõ≈ôit, ≈æe jsme na spr√°vn√© str√°nce
            const title = await companiesPage.getElementText(companiesPage.selectors.pageTitle);
            expect(title).to.include('Company');
            
            console.log('‚úÖ Company detail accessible');
        });
    });

    describe('Krok 3: Konfigurace AbraFlexi credentials', function() {
        it('should create AbraFlexi credentials', async function() {
            console.log('üîê Creating AbraFlexi credentials...');
            
            await credentialsPage.createCredential(abraFlexiCredentials);
            
            // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
            const credentials = await credentialsPage.getCredentialsList();
            const createdCredential = credentials.find(c => c.name.includes('AbraFlexi DEMO'));
            expect(createdCredential).to.exist;
            
            console.log('‚úÖ AbraFlexi credentials created');
        });
        
        it('should verify credential configuration', async function() {
            console.log('üîç Verifying credentials configuration...');
            
            // Test p≈ô√≠stupu k credential detailu
            await credentialsPage.goToCredential(1);
            
            const title = await credentialsPage.getElementText(credentialsPage.selectors.pageTitle);
            expect(title).to.include('MultiFlexi');
            
            console.log('‚úÖ Credentials configuration verified');
        });
    });

    describe('Krok 4: P≈ôi≈ôazen√≠ AbraFlexi aplikac√≠', function() {
        it('should verify available applications', async function() {
            console.log('üì± Kontrola dostupn√Ωch aplikac√≠...');
            
            const apps = await applicationsPage.getApplicationsList();
            expect(apps).to.be.an('array');
            expect(apps.length).to.be.greaterThan(0);
            
            console.log(`‚úÖ Nalezeno ${apps.length} dostupn√Ωch aplikac√≠`);
        });
        
        it('should create AbraFlexi-compatible application if needed', async function() {
            console.log('üîß Preparing AbraFlexi application...');
            
            const abraFlexiApp = {
                name: 'FIO Banka Statement Import',
                description: 'Import bankovn√≠ch v√Ωpis≈Ø z FIO banky do AbraFlexi',
                executable: 'fio-statement-import',
                homepage: 'https://github.com/VitexSoftware/php-abraflexi-banka',
                version: '1.0.0',
                enabled: true
            };
            
            await applicationsPage.createApplication(abraFlexiApp);
            
            // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
            const apps = await applicationsPage.getApplicationsList();
            const createdApp = apps.find(app => app.name.includes('FIO Banka'));
            expect(createdApp).to.exist;
            
            console.log('‚úÖ AbraFlexi aplikace p≈ôipravena');
        });
    });

    describe('Krok 5: Vytvo≈ôen√≠ RunTemplate pro bankovn√≠ import', function() {
        it('should create bank import RunTemplate', async function() {
            console.log('üìã Creating RunTemplate for bank import...');
            
            await runTemplatePage.createRunTemplate(bankImportTemplate);
            
            // Ovƒõ≈ôen√≠ vytvo≈ôen√≠
            const templates = await runTemplatePage.getRunTemplatesList();
            const createdTemplate = templates.find(t => t.name.includes('Import bankovn√≠ch v√Ωpis≈Ø'));
            expect(createdTemplate).to.exist;
            
            console.log('‚úÖ RunTemplate for bank import created');
        });
        
        it('should verify RunTemplate configuration', async function() {
            console.log('üîç Verifying RunTemplate configuration...');
            
            // P≈ôej√≠t na seznam RunTemplate a ovƒõ≈ôit
            await runTemplatePage.goToRunTemplates();
            
            const templates = await runTemplatePage.getRunTemplatesList();
            expect(templates.length).to.be.greaterThan(0);
            
            console.log('‚úÖ RunTemplate configuration verified');
        });
    });

    describe('Krok 6: Test spu≈°tƒõn√≠ jobu', function() {
        it('should execute bank import job', async function() {
            console.log('‚ñ∂Ô∏è Starting bank import...');
            
            await runTemplatePage.executeRunTemplate(bankImportTemplate.name);
            
            // Poƒçkat na spu≈°tƒõn√≠
            await runTemplatePage.driver.sleep(3000);
            
            console.log('‚úÖ Job started');
        });
        
        it('should monitor job execution', async function() {
            console.log('üëÄ Monitoring pr≈Øbƒõhu jobu...');
            
            // P≈ôej√≠t na seznam job≈Ø
            const jobs = await jobsPage.getJobsList();
            expect(jobs).to.be.an('array');
            
            if (jobs.length > 0) {
                const latestJob = jobs[0];
                console.log(`üìä Latest job ID: ${latestJob.id}, Status: ${latestJob.status}`);
                
                // Z√≠skat status jobu
                const status = await jobsPage.getJobStatus(latestJob.id);
                expect(status).to.be.a('string');
                
                console.log(`üìà Job status: ${status}`);
            }
            
            console.log('‚úÖ Monitoring completed');
        });
    });

    describe('Krok 7: Kontrola v√Ωsledk≈Ø a finalizace', function() {
        it('should verify job output and logs', async function() {
            console.log('üìÑ Kontrola v√Ωstupu a log≈Ø...');
            
            const jobs = await jobsPage.getJobsList();
            
            if (jobs.length > 0) {
                const latestJob = jobs[0];
                
                // Z√≠skat v√Ωstup jobu
                const output = await jobsPage.getJobOutput(latestJob.id);
                expect(output).to.be.a('string');
                
                console.log('üìã Job output z√≠sk√°n');
            }
            
            console.log('‚úÖ Kontrola v√Ωsledk≈Ø dokonƒçena');
        });
        
        it('should verify complete workflow success', async function() {
            console.log('üéØ Fin√°ln√≠ ovƒõ≈ôen√≠ workflow...');
            
            // Ovƒõ≈ôit, ≈æe m√°me:
            // 1. Funkƒçn√≠ firmu
            const companies = await companiesPage.getCompaniesList();
            expect(companies.some(c => c.name.includes('DEMO'))).to.be.true;
            
            // 2. Funkƒçn√≠ credentials
            const credentials = await credentialsPage.getCredentialsList();
            expect(credentials.some(c => c.name.includes('AbraFlexi'))).to.be.true;
            
            // 3. Funkƒçn√≠ aplikaci
            const apps = await applicationsPage.getApplicationsList();
            expect(apps.length).to.be.greaterThan(0);
            
            // 4. Funkƒçn√≠ RunTemplate
            const templates = await runTemplatePage.getRunTemplatesList();
            expect(templates.some(t => t.name.includes('Import'))).to.be.true;
            
            console.log('üéâ AbraFlexi Complete Workflow √∫spƒõ≈°nƒõ dokonƒçen!');
        });
    });

    describe('Workflow Summary', function() {
        it('should provide complete workflow summary', async function() {
            console.log('\n' + '='.repeat(60));
            console.log('üìä ABRAFLEXI WORKFLOW SUMMARY');
            console.log('='.repeat(60));
            console.log('‚úÖ Admin √∫ƒçet vytvo≈ôen a p≈ôihl√°≈°en');
            console.log('‚úÖ Firma "DEMO s.r.o." vytvo≈ôena');
            console.log('‚úÖ AbraFlexi credentials nakonfigurov√°ny');
            console.log('‚úÖ AbraFlexi aplikace p≈ôipravena');
            console.log('‚úÖ RunTemplate pro bankovn√≠ import vytvo≈ôen');
            console.log('‚úÖ Job √∫spƒõ≈°nƒõ spu≈°tƒõn a monitorov√°n');
            console.log('‚úÖ V√Ωsledky ovƒõ≈ôeny');
            console.log('\nüéØ Firma je p≈ôipravena pro produkƒçn√≠ pou≈æit√≠!');
            console.log('üîÑ Bankovn√≠ v√Ωpisy budou importov√°ny ka≈æd√Ωch 60 minut');
            console.log('üìà Dashboard zobrazuje aktu√°ln√≠ statistiky');
            console.log('='.repeat(60) + '\n');
            
            // Test v≈ædy projde - je to jen pro logging
            expect(true).to.be.true;
        });
    });
});