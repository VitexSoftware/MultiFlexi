#!groovy

String[] distributions = ['debian:bullseye','debian:bookworm', 'ubuntu:focal', 'ubuntu:jammy']

String vendor = 'vitexsoftware'
String distribution = ''
//String distroFamily = ''
String distroCodename = ''
String ver = ''

properties([
        copyArtifactPermission('*')
    ])
node() {
    ansiColor('xterm') {
        stage('SCM Checkout') {
            checkout scm
        }
    }
}

distributions.each {
    distribution = it

    println  "Dist:" + distribution

    def dist = distribution.split(':')
    //      distroFamily = dist[0]
    distroCodename = dist[1]

    def buildImage = ''

    node {
        ansiColor('xterm') {
            stage('Checkout ' + distribution) {
                buildImage = docker.image(vendor + '/' + distribution)
		sh 'git checkout debian/changelog'
                def VERSION = sh (
                    script: 'dpkg-parsechangelog --show-field Version',
                    returnStdout: true
                ).trim()
                ver = VERSION + '~' + distroCodename + '~' + env.BUILD_NUMBER
            }
            stage('Build ' + distribution) {
                buildImage.inside {
                    sh 'dch -b -v ' + ver  + ' "' + env.BUILD_TAG  + '"'
                    sh 'sudo apt-get update --allow-releaseinfo-change'
                    sh 'sudo chown jenkins:jenkins ..'
                    sh 'debuild-pbuilder  -i -us -uc -b'
                    sh 'mkdir -p $WORKSPACE/dist/debian/ ; rm -rf $WORKSPACE/dist/debian/* ; for deb in $(cat debian/files | awk \'{print $1}\'); do mv "../$deb" $WORKSPACE/dist/debian/; done'
                }
            }

            stage('Test ' + distribution) {
                buildImage.inside {
                    stash includes: 'dist/**', name: 'dist-' + distroCodename
                }
            }
            stage('Copy artifacts ' + distribution ) {
                buildImage.inside {
                    sh 'mv $WORKSPACE/dist/debian/*.deb $WORKSPACE'
                }
            }
        }
    }
}

