(()=>{var __webpack_modules__={"./node_modules/cron-validator/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/cron-validator/lib/index.js ***!
  \**************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: top-level-this-exports, __webpack_exports__ */
/*! CommonJS bailout: this is used directly at 3:15-19 */function(__unused_webpack_module,exports){"use strict";eval("\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isValidCron = void 0; // This comes from the fact that parseInt trims characters coming\n// after digits and consider it a valid int, so `1*` becomes `1`.\n\nvar safeParseInt = function (value) {\n  if (/^\\d+$/.test(value)) {\n    return Number(value);\n  } else {\n    return NaN;\n  }\n};\n\nvar isWildcard = function (value) {\n  return value === '*';\n};\n\nvar isQuestionMark = function (value) {\n  return value === '?';\n};\n\nvar isInRange = function (value, start, stop) {\n  return value >= start && value <= stop;\n};\n\nvar isValidRange = function (value, start, stop) {\n  var sides = value.split('-');\n\n  switch (sides.length) {\n    case 1:\n      return isWildcard(value) || isInRange(safeParseInt(value), start, stop);\n\n    case 2:\n      var _a = sides.map(function (side) {\n        return safeParseInt(side);\n      }),\n          small = _a[0],\n          big = _a[1];\n\n      return small <= big && isInRange(small, start, stop) && isInRange(big, start, stop);\n\n    default:\n      return false;\n  }\n};\n\nvar isValidStep = function (value) {\n  return value === undefined || value.search(/[^\\d]/) === -1;\n};\n\nvar validateForRange = function (value, start, stop) {\n  if (value.search(/[^\\d-,\\/*]/) !== -1) {\n    return false;\n  }\n\n  var list = value.split(',');\n  return list.every(function (condition) {\n    var splits = condition.split('/'); // Prevents `*/ * * * *` from being accepted.\n\n    if (condition.trim().endsWith('/')) {\n      return false;\n    } // Prevents `*/*/* * * * *` from being accepted\n\n\n    if (splits.length > 2) {\n      return false;\n    } // If we don't have a `/`, right will be undefined which is considered a valid step if we don't a `/`.\n\n\n    var left = splits[0],\n        right = splits[1];\n    return isValidRange(left, start, stop) && isValidStep(right);\n  });\n};\n\nvar hasValidSeconds = function (seconds) {\n  return validateForRange(seconds, 0, 59);\n};\n\nvar hasValidMinutes = function (minutes) {\n  return validateForRange(minutes, 0, 59);\n};\n\nvar hasValidHours = function (hours) {\n  return validateForRange(hours, 0, 23);\n};\n\nvar hasValidDays = function (days, allowBlankDay) {\n  return allowBlankDay && isQuestionMark(days) || validateForRange(days, 1, 31);\n};\n\nvar monthAlias = {\n  jan: '1',\n  feb: '2',\n  mar: '3',\n  apr: '4',\n  may: '5',\n  jun: '6',\n  jul: '7',\n  aug: '8',\n  sep: '9',\n  oct: '10',\n  nov: '11',\n  dec: '12'\n};\n\nvar hasValidMonths = function (months, alias) {\n  // Prevents alias to be used as steps\n  if (months.search(/\\/[a-zA-Z]/) !== -1) {\n    return false;\n  }\n\n  if (alias) {\n    var remappedMonths = months.toLowerCase().replace(/[a-z]{3}/g, function (match) {\n      return monthAlias[match] === undefined ? match : monthAlias[match];\n    }); // If any invalid alias was used, it won't pass the other checks as there will be non-numeric values in the months\n\n    return validateForRange(remappedMonths, 1, 12);\n  }\n\n  return validateForRange(months, 1, 12);\n};\n\nvar weekdaysAlias = {\n  sun: '0',\n  mon: '1',\n  tue: '2',\n  wed: '3',\n  thu: '4',\n  fri: '5',\n  sat: '6'\n};\n\nvar hasValidWeekdays = function (weekdays, alias, allowBlankDay, allowSevenAsSunday) {\n  // If there is a question mark, checks if the allowBlankDay flag is set\n  if (allowBlankDay && isQuestionMark(weekdays)) {\n    return true;\n  } else if (!allowBlankDay && isQuestionMark(weekdays)) {\n    return false;\n  } // Prevents alias to be used as steps\n\n\n  if (weekdays.search(/\\/[a-zA-Z]/) !== -1) {\n    return false;\n  }\n\n  if (alias) {\n    var remappedWeekdays = weekdays.toLowerCase().replace(/[a-z]{3}/g, function (match) {\n      return weekdaysAlias[match] === undefined ? match : weekdaysAlias[match];\n    }); // If any invalid alias was used, it won't pass the other checks as there will be non-numeric values in the weekdays\n\n    return validateForRange(remappedWeekdays, 0, allowSevenAsSunday ? 7 : 6);\n  }\n\n  return validateForRange(weekdays, 0, allowSevenAsSunday ? 7 : 6);\n};\n\nvar hasCompatibleDayFormat = function (days, weekdays, allowBlankDay) {\n  return !(allowBlankDay && isQuestionMark(days) && isQuestionMark(weekdays));\n};\n\nvar split = function (cron) {\n  return cron.trim().split(/\\s+/);\n};\n\nvar defaultOptions = {\n  alias: false,\n  seconds: false,\n  allowBlankDay: false,\n  allowSevenAsSunday: false\n};\n\nexports.isValidCron = function (cron, options) {\n  options = __assign(__assign({}, defaultOptions), options);\n  var splits = split(cron);\n\n  if (splits.length > (options.seconds ? 6 : 5) || splits.length < 5) {\n    return false;\n  }\n\n  var checks = [];\n\n  if (splits.length === 6) {\n    var seconds = splits.shift();\n\n    if (seconds) {\n      checks.push(hasValidSeconds(seconds));\n    }\n  } // We could only check the steps gradually and return false on the first invalid block,\n  // However, this won't have any performance impact so why bother for now.\n\n\n  var minutes = splits[0],\n      hours = splits[1],\n      days = splits[2],\n      months = splits[3],\n      weekdays = splits[4];\n  checks.push(hasValidMinutes(minutes));\n  checks.push(hasValidHours(hours));\n  checks.push(hasValidDays(days, options.allowBlankDay));\n  checks.push(hasValidMonths(months, options.alias));\n  checks.push(hasValidWeekdays(weekdays, options.alias, options.allowBlankDay, options.allowSevenAsSunday));\n  checks.push(hasCompatibleDayFormat(days, weekdays, options.allowBlankDay));\n  return checks.every(Boolean);\n};\n\n//# sourceURL=webpack://cron-expression-input/./node_modules/cron-validator/lib/index.js?")}},__webpack_module_cache__={};function __webpack_require__(n){if(__webpack_module_cache__[n])return __webpack_module_cache__[n].exports;var e=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__),e.exports}(()=>{
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: __webpack_require__ */
eval('function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar cron = __webpack_require__(/*! cron-validator */ "./node_modules/cron-validator/lib/index.js");\n\nvar CronComponent = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(CronComponent, _HTMLElement);\n\n  var _super = _createSuper(CronComponent);\n\n  function CronComponent() {\n    _classCallCheck(this, CronComponent);\n\n    return _super.call(this);\n  }\n\n  _createClass(CronComponent, [{\n    key: "Init",\n    value: function Init(state) {\n      var _this = this;\n\n      this.state = state;\n\n      if (this.state.props != undefined) {\n        this.state.props.forEach(function (p) {\n          _this.state.self[p] = state.self.getAttribute(p);\n        });\n      }\n    }\n  }, {\n    key: "Create",\n    value: function Create(self, template) {\n      self.innerHTML = "";\n      var div = document.createElement("div");\n      div.innerHTML = template;\n      self.appendChild(div);\n    }\n  }, {\n    key: "getElements",\n    value: function getElements(className) {\n      return this.state.self.querySelectorAll(className);\n    }\n  }, {\n    key: "getElement",\n    value: function getElement(className) {\n      return this.state.self.querySelector(className);\n    }\n  }, {\n    key: "addEvent",\n    value: function addEvent(className, event, handle) {\n      this.getElements(className).forEach(function (element) {\n        element.addEventListener(event, function (e) {\n          handle(e.target);\n        });\n      });\n    }\n  }, {\n    key: "increaseBrightness",\n    value: function increaseBrightness(hex, percent) {\n      hex = hex.replace(/^\\s*#|\\s*$/g, "");\n\n      if (hex.length == 3) {\n        hex = hex.replace(/(.)/g, "$1$1");\n      }\n\n      var r = parseInt(hex.substr(0, 2), 16);\n      var g = parseInt(hex.substr(2, 2), 16);\n      var b = parseInt(hex.substr(4, 2), 16);\n      return "#" + (0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16).substr(1) + (0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16).substr(1) + (0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16).substr(1);\n    }\n  }]);\n\n  return CronComponent;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\ncustomElements.define("cron-fields", /*#__PURE__*/function (_CronComponent) {\n  _inherits(_class, _CronComponent);\n\n  var _super2 = _createSuper(_class);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _super2.call(this);\n  }\n\n  _createClass(_class, [{\n    key: "connectedCallback",\n    value: function connectedCallback() {\n      this.Init({\n        self: this,\n        props: ["input", "hasZero", "every", "colorMain", "colorSecond"]\n      });\n      var template = "\\n  <div>\\n    <style>\\n      cron-expression-input input[type=\\"radio\\"]:checked:after { background-color: ".concat(this.colorMain, " !important; }\\n      cron-expression-input input[type=\\"radio\\"] { border: 0.1em solid ").concat(this.colorSecond, " !important; }\\n      .container input:checked ~ .checkmark { background-color: ").concat(this.colorSecond, " !important; }\\n    </style>\\n    <form>\\n        <div style=\'display: flex; height: 138px;\'>\\n            <div class=\'panel panel-default\' style=\'margin-right: 2.5px; width: 50%; height: 132px;\'>\\n                <div class=\'panel-heading\'>\\n                    <div style=\'display: flex;\'> <input class=\'propagationClass form-check-input\' type=\'radio\' name=\'choise\' value=\'1\'\\n                            match=\'choise\' checked> <span style=\'margin-left: 10px;\'>Step</span> </div>\\n                </div>\\n                <div class=\'panel-body\' style=\'display: flex !important;\'>\\n                    <div class=\'propagationClass form-group\' style=\'margin-right: 5px; width: 50%;\'> <label\\n                            for=\'everySelect\'>Every</label> <select match=\'every\' class=\'form-control\'\\n                            style=\'width: 100%;\'>\\n                            <option>*</option>\\n                        </select> </div>\\n                    <div class=\'form-group\' style=\'margin-left: 5px; width: 50%;\'> <label for=\'stepSelect\'>Step</label>\\n                        <select match=\'step\' class=\'propagationClass form-control\' style=\'width: 100%;\'>\\n                            <option>*</option>\\n                        </select> </div>\\n                </div>\\n            </div>\\n            <div class=\'panel panel-default\' style=\'margin-left: 2.5px; width: 50%; height: 132px;\'>\\n                <div class=\'panel-heading\'>\\n                    <div style=\'display: flex;\'> <input class=\'propagationClass form-check-input\' type=\'radio\' name=\'choise\' value=\'2\'\\n                            match=\'choise\'> <span style=\'margin-left: 10px;\'>Range</span> </div>\\n                </div>\\n                <div class=\'panel-body\'>\\n                    <div class=\'form-group\'>\\n                        <div style=\'display: flex;\'>\\n                            <div style=\'width: 50%; margin-right: 5px;\'> <label class=\'form-check-label\'\\n                                    for=\'exampleRadios1\'>Min</label> <select match=\'rangeMin\'\\n                                    class=\'propagationClass form-control\' style=\'width: 100%;\'>\\n                                </select> </div>\\n                            <div style=\'width: 50%; margin-right: 5px;\'> <label class=\'form-check-label\'\\n                                    for=\'exampleRadios1\'>Max</label> <select match=\'rangeMax\'\\n                                    class=\'propagationClass form-control\' style=\'width: 100%;\'>\\n                                </select> </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\'panel panel-default\' style=\'margin: 0px !important; padding: 0px !important; height: 214px;\'>\\n            <div class=\'panel-heading\'>\\n                <div style=\'display: flex;\'> <input class=\'propagationClass form-check-input\' type=\'radio\' name=\'choise\' value=\'3\'\\n                        match=\'choise\'> <span style=\'margin-left: 10px;\'>Choise</span> </div>\\n            </div>\\n            <div class=\'panel-body\' style=\\"padding-top: 6px !important;\\">\\n                <div match=\'spesific\' class=\'form-group\'\\n                    style=\'display: flex !important; flex-wrap: wrap !important; margin: 0px !important; padding: 0px !important;\'>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</div>\\n");\n      this.value = "*";\n      this.Create(this, template);\n      this.Mount();\n    }\n  }, {\n    key: "Mount",\n    value: function Mount() {\n      this.addSelectOptions("every");\n      this.addSelectOptions("step");\n      this.addSelectOptions("rangeMin");\n      this.addSelectOptions("rangeMax");\n      this.addSpesificOptions("spesific");\n      this.eventListen("select");\n      this.eventListen("input");\n    }\n  }, {\n    key: "getNumber",\n    value: function getNumber(n) {\n      return n.toString().padStart(2, "0");\n    }\n  }, {\n    key: "getHasZero",\n    value: function getHasZero() {\n      return this.hasZero ? 0 : 1;\n    }\n  }, {\n    key: "addSelectOptions",\n    value: function addSelectOptions(attr) {\n      var match = this.getElement("*[match=" + attr + "]");\n\n      for (var i = this.getHasZero(); i <= this["every"]; i++) {\n        var option = document.createElement("option");\n        option.innerText = this.getNumber(i);\n        option.value = i;\n        match.appendChild(option);\n      }\n    }\n  }, {\n    key: "addSpesificOptions",\n    value: function addSpesificOptions(attr) {\n      var match = this.getElement("*[match=" + attr + "]");\n\n      for (var i = this.getHasZero(); i <= this["every"]; i++) {\n        var div = document.createElement("div");\n        div.innerHTML = "\\n      <div style=\\"margin: 10px;\\">\\n          <label class=\\"container\\">\\n              <span class=\\"numberValue\\">".concat(this.getNumber(i), "</span>\\n              <input class=\\"propagationClass\\" value=\'").concat(i, "\' type=\\"checkbox\\">\\n              <span class=\\"checkmark\\"></span>\\n          </label>\\n      </div>\\n    ");\n        div.style = "width: 55px !important;";\n        match.appendChild(div);\n      }\n    }\n  }, {\n    key: "makeCron",\n    value: function makeCron(choise, input) {\n      var cron = "*";\n\n      if (choise == 1) {\n        if (input.step == "*") {\n          cron = "".concat(input.every);\n        } else {\n          cron = "".concat(input.every, "/").concat(input.step);\n        }\n      } else if (choise == 2 && !(input.rangeMin == "*" || input.rangeMax == "*")) {\n        var min = parseInt(input.rangeMin);\n        var max = parseInt(input.rangeMax);\n\n        if (!(min >= max)) {\n          cron = "".concat(input.rangeMin, "-").concat(input.rangeMax);\n        }\n      } else if (choise == 3 && input.spesific.length != 0) {\n        cron = "";\n        input.spesific.forEach(function (m) {\n          cron += m + ",";\n        });\n        cron = cron.slice(0, cron.length - 1);\n      }\n\n      this.value = cron;\n    }\n  }, {\n    key: "eventListen",\n    value: function eventListen(attr) {\n      var self = this;\n      this.getElements(attr).forEach(function (element) {\n        element.addEventListener("change", function (e) {\n          var choise = self.getElement("*[match=choise]:checked").value;\n          var every = self.getElement("*[match=every]").value;\n          var step = self.getElement("*[match=step]").value;\n          var rangeMin = self.getElement("*[match=rangeMin]").value;\n          var rangeMax = self.getElement("*[match=rangeMax]").value;\n          var spesific = Array.prototype.map.call(self.getElements("*[match=spesific] input:checked"), function (input) {\n            return input.value;\n          });\n          self.makeCron(choise, {\n            every: every,\n            step: step,\n            rangeMin: rangeMin,\n            rangeMax: rangeMax,\n            spesific: spesific\n          });\n        });\n      });\n    }\n  }]);\n\n  return _class;\n}(CronComponent));\ncustomElements.define("cron-expression-input", /*#__PURE__*/function (_CronComponent2) {\n  _inherits(_class2, _CronComponent2);\n\n  var _super3 = _createSuper(_class2);\n\n  function _class2() {\n    _classCallCheck(this, _class2);\n\n    return _super3.call(this);\n  }\n\n  _createClass(_class2, [{\n    key: "connectedCallback",\n    value: function connectedCallback() {\n      this.width = this.getAttribute("width");\n      this.height = this.getAttribute("height");\n      var color = this.getAttribute("color").replace("#", "");\n      this.colorMain = "#" + color;\n      this.colorSecond = this.increaseBrightness(color, 10);\n      this.Init({\n        self: this\n      });\n      var template = "\\n          <div class=\\"cronInput\\" style=\\"display: flex !important; width: ".concat(this.width, " !important; height: ").concat(this.height, " !important;\\">\\n          <input class=\\"cronInsideInput\\" type=\\"text\\" class=\\"form-control\\" placeholder=\\"Cron Expression\\">\\n          <button type=\\"button\\" class=\\"cronButtonUI btn btn-custom\\" style=\\"font-size: 114% !important; border-color: ").concat(this.colorMain, " !important; background-color: ").concat(this.colorSecond, " !important;\\">\\n              <svg width=\\"1em\\" height=\\"1em\\" viewBox=\\"0 0 16 16\\" class=\\"bi bi-pencil-square\\" fill=\\"white\\">\\n              <path d=\\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\\"/>\\n              <path fill-rule=\\"evenodd\\" d=\\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\\"/>\\n            </svg>\\n          </button>\\n        </div>\\n<small class=\\"cronexpressionError hiden\\" style=\\"display: none; color: red !important; margin-top: 5px !important; margin-bottom: 5px !important;\\">expression cron invalida, try with (* * * * *)</small>\\n<div class=\\"modal\\" tabindex=\\"-1\\">\\n    <div class=\\"modal-dialog\\" style=\\"width: 893px !important;\\">\\n        <div class=\\"modal-content\\" style=\\"height: 480px !important\\">\\n            <div class=\\"modal-header\\" style=\\"height: 0px !important; padding-bottom: 30px !important;\\">\\n                <span class=\\"close2 cronClose\\">\\n                    <svg width=\\"1em\\" height=\\"1em\\" viewBox=\\"0 0 16 16\\" class=\\"bi bi-x-circle\\" fill=\\"").concat(this.colorMain, "\\" style=\\"font-size: 21px !important;\\">\\n                        <path fill-rule=\\"evenodd\\"\\n                            d=\\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\\" />\\n                        <path fill-rule=\\"evenodd\\"\\n                            d=\\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\\" />\\n                    </svg>\\n                </span>\\n                <span class=\\"close2 cronSave\\" style=\\"margin-right: 10px;\\">\\n                    <svg width=\\"1em\\" height=\\"1em\\" viewBox=\\"0 0 16 16\\" class=\\"bi bi-check-circle\\" fill=\\"").concat(this.colorMain, "\\" style=\\" font-size: 21px !important;\\">\\n                        <path fill-rule=\\"evenodd\\"\\n                            d=\\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\\" />\\n                        <path fill-rule=\\"evenodd\\"\\n                            d=\\"M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.236.236 0 0 1 .02-.022z\\" />\\n                    </svg>\\n                </span>\\n            </div>\\n            <div class=\\"modal-body\\" style=\\"padding-top: 0px !important;\\">\\n                <ul class=\\"nav nav-tabs\\" style=\\"margin-top: 0px;\\">\\n                    <li class=\\"nav-item active in\\"><a class=\\"nav-link\\">Minutes</a></li>\\n                    <li class=\\"nav-item\\"><a class=\\"nav-link\\">Hours</a></li>\\n                    <li class=\\"nav-item\\"><a class=\\"nav-link\\">Day of Month</a></li>\\n                    <li class=\\"nav-item\\"><a class=\\"nav-link\\">Month</a></li>\\n                    <li class=\\"nav-item\\"><a class=\\"nav-link\\">Days of week</a></li>\\n                </ul>\\n                <div class=\\"tab-content\\" style=\\"margin-top: 13px !important;\\">\\n                    <div class=\\"tab-pane active in\\">\\n                        <cron-fields pos=\\"0\\" input=\\"minute\\" hasZero=\\"true\\" every=\\"59\\" colorMain=\\"").concat(this.colorMain, "\\" colorSecond=\\"").concat(this.colorSecond, "\\" />\\n                    </div>\\n                    <div class=\\"tab-pane fade\\">\\n                        <cron-fields pos=\\"1\\" input=\\"hour\\" hasZero=\\"true\\" every=\\"23\\" colorMain=\\"").concat(this.colorMain, "\\" colorSecond=\\"").concat(this.colorSecond, "\\" />\\n                    </div>\\n                    <div class=\\"tab-pane fade\\">\\n                        <cron-fields pos=\\"2\\" input=\\"dayOfMonth\\" every=\\"31\\" colorMain=\\"").concat(this.colorMain, "\\" colorSecond=\\"").concat(this.colorSecond, "\\" />\\n                    </div>\\n                    <div class=\\"tab-pane fade\\">\\n                        <cron-fields pos=\\"3\\" input=\\"month\\" every=\\"12\\" colorMain=\\"").concat(this.colorMain, "\\" colorSecond=\\"").concat(this.colorSecond, "\\" />\\n                    </div>\\n                    <div class=\\"tab-pane fade\\">\\n                        <cron-fields pos=\\"4\\" input=\\"dayOfWeek\\" hasZero=\\"true\\" every=\\"6\\" colorMain=\\"").concat(this.colorMain, "\\" colorSecond=\\"").concat(this.colorSecond, "\\" />\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n");\n      var self = this;\n      this.Create(self, template);\n      this.setValue(this.getAttribute("value"));\n      var input1 = this.getElement(".cronInsideInput");\n      input1.addEventListener("keydown", function (e) {\n        self.validateLongitud(e);\n      });\n      input1.addEventListener("keypress", function (e) {\n        self.validateLongitud(e);\n      });\n      input1.addEventListener("keyup", function (e) {\n        self.validateLongitud(e);\n      });\n      this.addEvent(".cronButtonUI", "click", function () {\n        self.currentValue = self.getAttribute("value");\n        self.modalToggle();\n      });\n      this.addEvent(".cronClose", "click", function () {\n        self.setValue(self.currentValue);\n        self.modalToggle();\n      });\n      this.addEvent(".cronSave", "click", function () {\n        self.modalToggle();\n      });\n      this.addEvent("li > a", "click", function (scope) {\n        var index = 0;\n        self.getElements("li > a").forEach(function (elem, i) {\n          elem.parentNode.setAttribute("class", "nav-link");\n\n          if (elem == scope) {\n            index = i;\n          }\n        });\n        scope.parentNode.setAttribute("class", "nav-link active in");\n        var elements = self.getElements("cron-fields");\n        elements.forEach(function (elem) {\n          elem.parentNode.setAttribute("class", \'tab-pane fade"\');\n        });\n        elements[index].parentNode.setAttribute("class", "tab-pane active in");\n      });\n      this.addEvent(".cronInsideInput", "change", function (e) {\n        var error = self.getElement(".cronexpressionError");\n\n        if (!cron.isValidCron(e.value)) {\n          error.classList.replace("hiden", "show");\n        } else {\n          error.classList.replace("show", "hiden");\n        }\n\n        self.setValue(e["value"]);\n      });\n      this.addEvent("cron-fields", "change", function (e) {\n        var value = true;\n        var node = e.parentNode;\n\n        while (value) {\n          node = node.parentNode;\n          if (node.nodeName == "CRON-FIELDS") value = false;\n        }\n\n        var input2 = self.getElement(".cronInsideInput");\n        self.setValue(self.generateCron(parseInt(node.getAttribute("pos")), input2["value"], node.value));\n      }); // Stop InputEvent when a input is clicked.\n\n      this.getElements(".propagationClass").forEach(function (element) {\n        element.addEventListener("input", function (e) {\n          e.stopPropagation();\n        });\n      });\n    }\n  }, {\n    key: "validateLongitud",\n    value: function validateLongitud(e) {\n      var values = e.target.value.trim().split(" ");\n\n      if (values.length > 5) {\n        e.target.value = values.slice(0, 5).join(" ");\n      }\n\n      this.sendEvent();\n    }\n  }, {\n    key: "setValue",\n    value: function setValue(value) {\n      var defaultArray = ["*", "*", "*", "*", "*"];\n\n      if (value == undefined) {\n        return defaultArray.join(" ");\n      } else if (value.length > 0) {\n        var array = value.trim().split(" ");\n\n        for (var i = 0; i < 5; i++) {\n          if (array[i] != undefined) {\n            defaultArray[i] = array[i];\n          }\n        }\n\n        value = defaultArray.join(" ");\n      }\n\n      var input3 = this.getElement(".cronInsideInput");\n      input3.value = value;\n      this.sendEvent();\n    }\n  }, {\n    key: "modalToggle",\n    value: function modalToggle() {\n      this.getElement(".modal").classList.toggle("show");\n    }\n  }, {\n    key: "generateCron",\n    value: function generateCron(pos, values, value) {\n      var values = values.split(" ");\n      values[pos] = value;\n      return values.join(" ");\n    }\n  }, {\n    key: "sendEvent",\n    value: function sendEvent() {\n      var input4 = this.getElement(".cronInsideInput");\n      var event = new CustomEvent("input", {\n        detail: {\n          value: input4.value\n        },\n        bubbles: true,\n        cancelable: true\n      });\n      this.dispatchEvent(event);\n    }\n  }]);\n\n  return _class2;\n}(CronComponent));\n\n//# sourceURL=webpack://cron-expression-input/./src/index.js?')})()})();
