<?php

declare(strict_types=1);

/**
 * This file is part of the MultiFlexi package
 *
 * https://multiflexi.eu/
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git.
 */
/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator.
 */
require_once __DIR__.'/../../vendor/autoload.php';

use DI\Bridge\Slim\Bridge;
use DI\ContainerBuilder;
use MultiFlexi\Api\App\RegisterDependencies;
use MultiFlexi\Api\App\RegisterMiddlewares;
use MultiFlexi\Api\App\RegisterRoutes;
use MultiFlexi\Api\App\ResponseEmitter as Response;
use Neomerx\Cors\Contracts\AnalyzerInterface;
use Slim\Factory\ServerRequestCreatorFactory;
use Slim\Middleware\ErrorMiddleware;

\Ease\Shared::singleton()->loadConfig(\dirname(__DIR__).'/../.env', true);

// Instantiate PHP-DI ContainerBuilder
$builder = new ContainerBuilder();

// Main configuration
$builder->addDefinitions(__DIR__.'/config.php');

// Config file for the environment if exists
$userConfig = __DIR__.'/config.php';

if (file_exists($userConfig)) {
    $builder->addDefinitions($userConfig);
}

// Set up dependencies
$dependencies = new RegisterDependencies();
$dependencies($builder);

// Build PHP-DI Container instance
$container = $builder->build();

// Instantiate the app
$app = Bridge::create($container);

$basePath = '/MultiFlexi/src/api';

$app->setBasePath($basePath);
$path = $basePath.'/VitexSoftware/MultiFlexi/1.0.0/';

// Register middleware
$middleware = new RegisterMiddlewares();
$middleware($app);

// Register routes
// yes, it's anti-pattern you shouldn't get deps from container directly
$routes = $container->get(RegisterRoutes::class);
$routes($app);

// Create Request object from globals
$serverRequestCreator = ServerRequestCreatorFactory::create();
$request = $serverRequestCreator->createServerRequestFromGlobals();

// Get error middleware from container
// also anti-pattern, of course we know
$errorMiddleware = $container->get(ErrorMiddleware::class);

$app->add(new \Dyorg\TokenAuthentication([
    'path' => $app->getBasePath(),
    'passthrough' => ['/', '/ping', '/login'], /* or ['/api/auth', '/api/test'] */
    'authenticator' => static function ($arguments) {
        return (bool) mt_rand(0, 1);
    },
]));

// route0 → (unnamed) → /{routes:.*}
// route1 → listServers → /VitexSoftware/MultiFlexi/1.0.0/servers/
// route2 → setAbraFlexiById → /VitexSoftware/MultiFlexi/1.0.0/abraflexi/
// route3 → getAbraFlexiById → /VitexSoftware/MultiFlexi/1.0.0/abraflexi/{abraflexiId}
// route4 → listApps → /VitexSoftware/MultiFlexi/1.0.0/apps/
// route5 → setAppById → /VitexSoftware/MultiFlexi/1.0.0/app/
// route6 → getAppById → /VitexSoftware/MultiFlexi/1.0.0/app/{appId}
// route7 → getApiIndex → /VitexSoftware/MultiFlexi/1.0.0/
// route8 → loginGet → /VitexSoftware/MultiFlexi/1.0.0/login
// route9 → loginPost → /VitexSoftware/MultiFlexi/1.0.0/login
// route10 → pingGet → /VitexSoftware/MultiFlexi/1.0.0/ping
// route11 → (unnamed) → /

$app->add(new \Tuupola\Middleware\HttpBasicAuthentication([
    'relaxed' => ['localhost'],
    //            'path' => ['/EASE/MultiFlexi/src/api/VitexSoftware/MultiFlexi/1.0.0/apps/', $path . '/apps', $path . '/users'],
    //            "ignore" => [$path . '/', $path . '/ping', $path . '/authorize'],
    //            'path' => '/',
    'ignore' => [$path.'/', $path.'/ping/'],
    //            "authenticator" => new \MultiFlexi\Auth\BasicAuthenticator()
    'authenticator' => static function ($arguments) {
        $prober = \Ease\Shared::user(null, '\MultiFlexi\User');

        if ($prober->isLogged()) {
            return true;
        }

        $prober->loadFromSQL(['login' => $arguments['user']]);

        return $prober->isAccountEnabled() && $prober->passwordValidation($arguments['password'], $prober->getDataValue($prober->passwordColumn));
    },
]));

$app->get($basePath, static function (Request $request, Response $response, $args) {
    $response->getBody()->write('MultiFlexi Api Root');

    return $response;
});
session_start();
// Run App & Emit Response
$response = $app->handle($request);
$responseEmitter = (new Response())
    ->setRequest($request)
    ->setErrorMiddleware($errorMiddleware)
    ->setAnalyzer($container->get(AnalyzerInterface::class));

$responseEmitter->emit($response);
