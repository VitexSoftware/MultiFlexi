<?php

/**
 * MultiFlexi API
 * PHP version 7.4
 *
 * @package MultiFlexi
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace MultiFlexi\Model;

use PHPUnit\Framework\TestCase;
use MultiFlexi\Model\Company;

/**
 * CompanyTest Class Doc Comment
 *
 * @package MultiFlexi\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \MultiFlexi\Model\Company
 */
class CompanyTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "Company"
     */
    public function testCompany()
    {
        $testCompany = new Company();
        $namespacedClassname = Company::getModelsNamespace() . '\\Company';
        $this->assertSame('\\' . Company::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        $this->markTestIncomplete(
            'Test of "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        $this->markTestIncomplete(
            'Test of "id" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "enabled"
     */
    public function testPropertyEnabled()
    {
        $this->markTestIncomplete(
            'Test of "enabled" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "settings"
     */
    public function testPropertySettings()
    {
        $this->markTestIncomplete(
            'Test of "settings" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "logo"
     */
    public function testPropertyLogo()
    {
        $this->markTestIncomplete(
            'Test of "logo" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "server"
     */
    public function testPropertyServer()
    {
        $this->markTestIncomplete(
            'Test of "server" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        $this->markTestIncomplete(
            'Test of "name" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "ic"
     */
    public function testPropertyIc()
    {
        $this->markTestIncomplete(
            'Test of "ic" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "company"
     */
    public function testPropertyCompany()
    {
        $this->markTestIncomplete(
            'Test of "company" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "rw"
     */
    public function testPropertyRw()
    {
        $this->markTestIncomplete(
            'Test of "rw" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "setup"
     */
    public function testPropertySetup()
    {
        $this->markTestIncomplete(
            'Test of "setup" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "webhook"
     */
    public function testPropertyWebhook()
    {
        $this->markTestIncomplete(
            'Test of "webhook" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "datCreate"
     */
    public function testPropertyDatCreate()
    {
        $this->markTestIncomplete(
            'Test of "datCreate" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "datUpdate"
     */
    public function testPropertyDatUpdate()
    {
        $this->markTestIncomplete(
            'Test of "datUpdate" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "customer"
     */
    public function testPropertyCustomer()
    {
        $this->markTestIncomplete(
            'Test of "customer" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "email"
     */
    public function testPropertyEmail()
    {
        $this->markTestIncomplete(
            'Test of "email" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "code"
     */
    public function testPropertyCode()
    {
        $this->markTestIncomplete(
            'Test of "code" property in "Company" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = Company::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}
