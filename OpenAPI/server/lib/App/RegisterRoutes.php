<?php

/**
 * MultiFlexi API
 * PHP version 7.4
 *
 * @package AbraFlexi\MultiFlexi
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

declare(strict_types=1);

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace MultiFlexi\App;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * RegisterRoutes Class Doc Comment
 *
 * @package AbraFlexi\MultiFlexi
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class RegisterRoutes
{
    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/abraflexis',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAbraflexiApi',
            'userClassname' => 'AbraflexiApi',
            'operationId' => 'listAbraFlexis',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/AbraFlexi"
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid status value"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/abraflexi/',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAbraflexiApi',
            'userClassname' => 'AbraflexiApi',
            'operationId' => 'setAbraFlexiById',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "record created or updated",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/AbraFlexi"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "App not found"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/abraflexi/{abraflexiId}.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAbraflexiApi',
            'userClassname' => 'AbraflexiApi',
            'operationId' => 'getAbraFlexiById',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/AbraFlexi"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "App not found"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/app/',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAppApi',
            'userClassname' => 'AppApi',
            'operationId' => 'setAppById',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "application created or updated",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/App"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "App not found"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/app/{appId}.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAppApi',
            'userClassname' => 'AppApi',
            'operationId' => 'getAppById',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/App"
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid ID supplied"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "App not found"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/apps.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractAppApi',
            'userClassname' => 'AppApi',
            'operationId' => 'listApps',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "successful operation",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/App"
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Invalid status value"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Authentication information is missing or invalid",
  "headers" : {
    "WWW_Authenticate" : {
      "style" : "simple",
      "explode" : false,
      "schema" : {
        "type" : "string"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'basicAuth'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => false,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'rootGet',
            'responses' => [
                '301' => [
                    'jsonSchema' => '{
  "description" : "redirect to index.html"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/index.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'getApiIndex',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/login.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'loginSuffixGet',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/login.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'loginSuffixPost',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/VitexSoftware/MultiFlexi/1.0.0',
            'path' => '/ping.{suffix}',
            'apiPackage' => 'MultiFlexi\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'pingSuffixGet',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Add routes to Slim app.
     *
     * @param \Slim\App $app Pre-configured Slim application instance
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     */
    public function __invoke(\Slim\App $app): void
    {
        $app->options('/{routes:.*}', function (ServerRequestInterface $request, ResponseInterface $response) {
            // CORS Pre-Flight OPTIONS Request Handler
            return $response;
        });

        // create mock middleware factory
        /** @var \Psr\Container\ContainerInterface */
        $container = $app->getContainer();
        /** @var \OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory|null */
        $mockMiddlewareFactory = null;
        if ($container->has(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class)) {
            // I know, anti-pattern. Don't retrieve dependency directly from container
            $mockMiddlewareFactory = $container->get(\OpenAPIServer\Mock\OpenApiDataMockerRouteMiddlewareFactory::class);
        }

        foreach ($this->operations as $operation) {
            $callback = function (ServerRequestInterface $request) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                // Notice how we register the controller using the class name?
                // PHP-DI will instantiate the class for us only when it's actually necessary
                $callback = ["\\{$operation['apiPackage']}\\{$operation['userClassname']}", $operation['operationId']];
            }

            if ($mockMiddlewareFactory) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = $mockMiddlewareFactory->create($mockSchemaResponses);
            }

            $route = $app->map(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback
            )->setName($operation['operationId']);

            foreach ($middlewares as $middleware) {
                $route->add($middleware);
            }
        }
    }
}
